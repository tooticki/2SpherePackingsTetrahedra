
// radius of the support sphere or INFINITY if no sphere support
I radius(I ab, I ac, I ad, I bc, I bd, I cd)
{
    // coordinates of the vertices
    // A:(0,0,0), B:(ab,0,0), C:(xc,yc,0), D(xd,yd,zd)
    I xc=(pow(ab,2)+pow(ac,2)-pow(bc,2))/(I(2)*ab);
    I yc=pow(ac,2)-pow(xc,2);
    if (upper(yc)<=0) return I(INFINITY);
    yc=sqrt(yc);
    I xd=(pow(ab,2)+pow(ad,2)-pow(bd,2))/(I(2)*ab);
    I yd=-(pow(ab,2) - pow(bd,2) + pow(cd,2) - pow(xc,2) - I(2)*ab*xd + I(2)*xc*xd - pow(yc,2))/(I(2)*yc);
    I zd=pow(ad,2)-pow(xd,2)-pow(yd,2);
    if (upper(zd)<=0) return I(INFINITY);
    zd=sqrt(zd);
    // the wanted radius is the  root of A*r^2+B*r+C=0
    I A=I(4)*(pow(ab,2)*pow(ra,2) - I(2)*pow(ab,2)*ra*rd + pow(ab,2)*pow(rd,2) + (pow(ra,2) - I(2)*ra*rb + pow(rb,2))*pow(xd,2) - I(2)*(ab*pow(ra,2) - ab*ra*rb - (ab*ra - ab*rb)*rd)*xd)*pow(yc,2) - I(8)*(pow(ab,2)*pow(ra,2) - pow(ab,2)*ra*rc - (pow(ab,2)*ra - pow(ab,2)*rc)*rd - (ab*pow(ra,2) - ab*ra*rb - (ab*ra - ab*rb)*rd)*xc - (ab*pow(ra,2) - ab*ra*rb - (ab*ra - ab*rb)*rc - (pow(ra,2) - I(2)*ra*rb + pow(rb,2))*xc)*xd)*yc*yd + I(4)*(pow(ab,2)*pow(ra,2) - I(2)*pow(ab,2)*ra*rc + pow(ab,2)*pow(rc,2) + (pow(ra,2) - I(2)*ra*rb + pow(rb,2))*pow(xc,2) - I(2)*(ab*pow(ra,2) - ab*ra*rb - (ab*ra - ab*rb)*rc)*xc)*pow(yd,2) + I(4)*(pow(ab,2)*pow(ra,2) - I(2)*pow(ab,2)*ra*rc + pow(ab,2)*pow(rc,2) + (pow(ra,2) - I(2)*ra*rb + pow(rb,2))*pow(xc,2) - (pow(ab,2) - pow(ra,2) + I(2)*ra*rb - pow(rb,2))*pow(yc,2) - I(2)*(ab*pow(ra,2) - ab*ra*rb - (ab*ra - ab*rb)*rc)*xc)*pow(zd,2);
    I B=-I(4)*(pow(ab,2)*ra - pow(ab,2)*rc - (ab*ra - ab*rb)*xc)*yc*pow(yd,3) + I(4)*(pow(ab,2)*pow(ra,3) - pow(ab,2)*pow(ra,2)*rd - pow(ab,2)*ra*pow(rd,2) + pow(ab,2)*pow(rd,3) - (ab*ra - ab*rb)*pow(xd,3) + (I(2)*pow(ab,2)*ra + pow(ra,3) - ra*pow(rb,2) + pow(rb,3) - pow(ab,2)*rd - (pow(ab,2) + pow(ra,2))*rb)*pow(xd,2) - (pow(ab,3)*ra + I(2)*ab*pow(ra,3) - ab*pow(ra,2)*rb - ab*ra*pow(rb,2) - (ab*ra - ab*rb)*pow(rd,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*rd)*xd)*pow(yc,2) + I(4)*(pow(ab,2)*pow(ra,3) - pow(ab,2)*pow(ra,2)*rc - pow(ab,2)*ra*pow(rc,2) + pow(ab,2)*pow(rc,3) - (ab*ra - ab*rb)*pow(xc,3) + (I(2)*pow(ab,2)*ra + pow(ra,3) - ra*pow(rb,2) + pow(rb,3) - pow(ab,2)*rc - (pow(ab,2) + pow(ra,2))*rb)*pow(xc,2) + (I(2)*pow(ab,2)*ra - pow(ab,2)*rc - pow(ab,2)*rd - (ab*ra - ab*rb)*xc - (ab*ra - ab*rb)*xd)*pow(yc,2) - (pow(ab,3)*ra + I(2)*ab*pow(ra,3) - ab*pow(ra,2)*rb - ab*ra*pow(rb,2) - (ab*ra - ab*rb)*pow(rc,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*rc)*xc)*pow(yd,2) + I(4)*(pow(ab,2)*pow(ra,3) - pow(ab,2)*pow(ra,2)*rc - pow(ab,2)*ra*pow(rc,2) + pow(ab,2)*pow(rc,3) - (ab*ra - ab*rb)*pow(xc,3) + (I(2)*pow(ab,2)*ra + pow(ra,3) - ra*pow(rb,2) + pow(rb,3) - pow(ab,2)*rc - (pow(ab,2) + pow(ra,2))*rb)*pow(xc,2) + (pow(ab,2)*ra + pow(ra,3) - ra*pow(rb,2) + pow(rb,3) - pow(ab,2)*rc - pow(ab,2)*rd - (pow(ab,2) + pow(ra,2))*rb - (ab*ra - ab*rb)*xc - (ab*ra - ab*rb)*xd)*pow(yc,2) - (pow(ab,2)*ra - pow(ab,2)*rc - (ab*ra - ab*rb)*xc)*yc*yd - (pow(ab,3)*ra + I(2)*ab*pow(ra,3) - ab*pow(ra,2)*rb - ab*ra*pow(rb,2) - (ab*ra - ab*rb)*pow(rc,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*rc)*xc)*pow(zd,2) - I(4)*((pow(ab,2)*ra - pow(ab,2)*rd - (ab*ra - ab*rb)*xd)*pow(yc,3) + (I(2)*pow(ab,2)*pow(ra,3) - pow(ab,2)*pow(ra,2)*rc - pow(ab,2)*ra*pow(rc,2) - (pow(ab,2)*ra - pow(ab,2)*rc)*pow(rd,2) + (pow(ab,2)*ra - pow(ab,2)*rd)*pow(xc,2) + (pow(ab,2)*ra - pow(ab,2)*rc - (ab*ra - ab*rb)*xc)*pow(xd,2) - (pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rc,2))*rd - (pow(ab,3)*ra + I(2)*ab*pow(ra,3) - ab*pow(ra,2)*rb - ab*ra*pow(rb,2) - (ab*ra - ab*rb)*pow(rd,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*rd)*xc - (pow(ab,3)*ra + I(2)*ab*pow(ra,3) - ab*pow(ra,2)*rb - ab*ra*pow(rb,2) - (ab*ra - ab*rb)*pow(rc,2) + (ab*ra - ab*rb)*pow(xc,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*rc - I(2)*(pow(ab,2)*ra + pow(ra,3) - ra*pow(rb,2) + pow(rb,3) - (pow(ab,2) + pow(ra,2))*rb)*xc)*xd)*yc)*yd;
    I C=pow(ab,2)*pow(yc,2)*pow(yd,4) + pow(ab,2)*pow(yc,2)*pow(zd,4) - I(2)*(pow(ab,2)*pow(yc,3) + (pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rc,2) + pow(ab,2)*pow(xc,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xc)*yc)*pow(yd,3) + (pow(ab,2)*pow(ra,4) - I(2)*pow(ab,2)*pow(ra,2)*pow(rd,2) + pow(ab,2)*pow(rd,4) + pow(ab,2)*pow(xd,4) - I(2)*(pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(xd,3) + (pow(ab,4) + I(4)*pow(ab,2)*pow(ra,2) + pow(ra,4) + pow(rb,4) - I(2)*pow(ab,2)*pow(rd,2) - I(2)*(pow(ab,2) + pow(ra,2))*pow(rb,2))*pow(xd,2) - I(2)*(pow(ab,3)*pow(ra,2) + ab*pow(ra,4) - ab*pow(ra,2)*pow(rb,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(rd,2))*xd)*pow(yc,2) + (pow(ab,2)*pow(ra,4) - I(2)*pow(ab,2)*pow(ra,2)*pow(rc,2) + pow(ab,2)*pow(rc,4) + pow(ab,2)*pow(xc,4) + pow(ab,2)*pow(yc,4) - I(2)*(pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(xc,3) + (pow(ab,4) + I(4)*pow(ab,2)*pow(ra,2) + pow(ra,4) + pow(rb,4) - I(2)*pow(ab,2)*pow(rc,2) - I(2)*(pow(ab,2) + pow(ra,2))*pow(rb,2))*pow(xc,2) + I(2)*(I(2)*pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rc,2) - pow(ab,2)*pow(rd,2) + pow(ab,2)*pow(xc,2) + pow(ab,2)*pow(xd,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xc - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xd)*pow(yc,2) - I(2)*(pow(ab,3)*pow(ra,2) + ab*pow(ra,4) - ab*pow(ra,2)*pow(rb,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(rc,2))*xc)*pow(yd,2) + (pow(ab,2)*pow(ra,4) - I(2)*pow(ab,2)*pow(ra,2)*pow(rc,2) + pow(ab,2)*pow(rc,4) + pow(ab,2)*pow(xc,4) + pow(ab,2)*pow(yc,4) + I(2)*pow(ab,2)*pow(yc,2)*pow(yd,2) - I(2)*(pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(xc,3) + (pow(ab,4) + I(4)*pow(ab,2)*pow(ra,2) + pow(ra,4) + pow(rb,4) - I(2)*pow(ab,2)*pow(rc,2) - I(2)*(pow(ab,2) + pow(ra,2))*pow(rb,2))*pow(xc,2) + (pow(ab,4) + I(2)*pow(ab,2)*pow(ra,2) + pow(ra,4) + pow(rb,4) - I(2)*pow(ab,2)*pow(rc,2) - I(2)*pow(ab,2)*pow(rd,2) + I(2)*pow(ab,2)*pow(xc,2) + I(2)*pow(ab,2)*pow(xd,2) - I(2)*(pow(ab,2) + pow(ra,2))*pow(rb,2) - I(2)*(pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xc - I(2)*(pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xd)*pow(yc,2) - I(2)*(pow(ab,3)*pow(ra,2) + ab*pow(ra,4) - ab*pow(ra,2)*pow(rb,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(rc,2))*xc - I(2)*(pow(ab,2)*pow(yc,3) + (pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rc,2) + pow(ab,2)*pow(xc,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xc)*yc)*yd)*pow(zd,2) - I(2)*((pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rd,2) + pow(ab,2)*pow(xd,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xd)*pow(yc,3) + (pow(ab,2)*pow(ra,4) - pow(ab,2)*pow(ra,2)*pow(rc,2) - (pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rc,2))*pow(rd,2) + (pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rd,2))*pow(xc,2) + (pow(ab,2)*pow(ra,2) - pow(ab,2)*pow(rc,2) + pow(ab,2)*pow(xc,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*xc)*pow(xd,2) - (pow(ab,3)*pow(ra,2) + ab*pow(ra,4) - ab*pow(ra,2)*pow(rb,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(rd,2))*xc - (pow(ab,3)*pow(ra,2) + ab*pow(ra,4) - ab*pow(ra,2)*pow(rb,2) - (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(rc,2) + (pow(ab,3) + ab*pow(ra,2) - ab*pow(rb,2))*pow(xc,2) - (pow(ab,4) + I(2)*pow(ab,2)*pow(ra,2) + pow(ra,4) + pow(rb,4) - I(2)*(pow(ab,2) + pow(ra,2))*pow(rb,2))*xc)*xd)*yc)*yd;
    // no chance for Ax^2+Bx+C to have a root smaller than r -> return Infinity
    if (!zero_in(A*square(hull(I(0),r))+B*hull(I(0),r)+C))
        return I(INFINITY);
    // usual formula through discriminant
    I D=square(B)-I(4)*A*C;
    if (upper(D)<=0) return I(INFINITY); // no support sphere -> return infinty so that the block will be ruled out
    I rs=(upper(C)<0 ? (-B+sqrt(D))/(I(2)*A) : (-B-sqrt(D))/(I(2)*A));
    // if A contains 0 or is very small: use the continuity of the roots in the coefficients!
    if (zero_in(A)||zero_in(C))
    {
        I x=I(4)*A*C/square(B);
        x=hull(x,I(0)); // the interval x must contain 0
        if (upper(x)<0.78) rs=intersect(rs,-C/B*(I(1)+x));
    }
    return rs;
}

